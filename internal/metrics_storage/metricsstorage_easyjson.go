// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package metricsstorage

import (
	json "encoding/json"
	metrics "github.com/a-palonskaa/metrics-server/internal/metrics"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson138723c2DecodeGithubComAPalonskaaMetricsServerInternalMetricsStorage(in *jlexer.Lexer, out *MetricsStorage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GaugeMetrics":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.GaugeMetrics = make(map[string]metrics.Gauge)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 metrics.Gauge
					v1 = metrics.Gauge(in.Float64())
					(out.GaugeMetrics)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "CounterMetrics":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.CounterMetrics = make(map[string]metrics.Counter)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 metrics.Counter
					v2 = metrics.Counter(in.Int64())
					(out.CounterMetrics)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "AllowedGaugeNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.AllowedGaugeNames = make(map[string]bool)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 bool
					v3 = bool(in.Bool())
					(out.AllowedGaugeNames)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "AllowedCounterNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.AllowedCounterNames = make(map[string]bool)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 bool
					v4 = bool(in.Bool())
					(out.AllowedCounterNames)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson138723c2EncodeGithubComAPalonskaaMetricsServerInternalMetricsStorage(out *jwriter.Writer, in MetricsStorage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"GaugeMetrics\":"
		out.RawString(prefix[1:])
		if in.GaugeMetrics == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.GaugeMetrics {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.Float64(float64(v5Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"CounterMetrics\":"
		out.RawString(prefix)
		if in.CounterMetrics == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.CounterMetrics {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.Int64(int64(v6Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"AllowedGaugeNames\":"
		out.RawString(prefix)
		if in.AllowedGaugeNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.AllowedGaugeNames {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				out.Bool(bool(v7Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"AllowedCounterNames\":"
		out.RawString(prefix)
		if in.AllowedCounterNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.AllowedCounterNames {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.Bool(bool(v8Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricsStorage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson138723c2EncodeGithubComAPalonskaaMetricsServerInternalMetricsStorage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricsStorage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson138723c2EncodeGithubComAPalonskaaMetricsServerInternalMetricsStorage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricsStorage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson138723c2DecodeGithubComAPalonskaaMetricsServerInternalMetricsStorage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricsStorage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson138723c2DecodeGithubComAPalonskaaMetricsServerInternalMetricsStorage(l, v)
}
